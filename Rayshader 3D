

 # The source of this script is from rayshader.com, but it has been slightly modified
# to enable the overlaying of custom satellite images, such as PCA and ICA processed images, on the 3D model.

# 1- Install Required Packages:

install.packages("rlang", dependencies = TRUE)
install.packages("tinytex", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
install.packages("vctrs", dependencies = TRUE)
install.packages(c('reshape2','scales'), dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("whitebox", dependencies = TRUE)
install.packages("rayrender", dependencies = TRUE)
install.packages("spatstat", dependencies = TRUE)
install.packages("suncalc", dependencies = TRUE)
install.packages("slam", dependencies = TRUE)
install.packages("dismo", dependencies = TRUE)
install.packages("ggmap", dependencies = TRUE)
install.packages("rgdal", dependencies = TRUE)
install.packages("rgl", dependencies = TRUE)
install.packages("Rglpk", dependencies = TRUE)
install.packages("rayshader", dependencies = TRUE)
install.packages("terra", dependencies = TRUE)
install.packages("sp", dependencies = TRUE)
install.packages("raster", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
install.packages("here", dependencies = TRUE)
install.packages("lazyraster", dependencies = TRUE)
install.packages(c("rayshader", "raster"))
install.packages("pixmap", dependencies = TRUE)
install.packages("rgdal", dependencies = TRUE)

# 2- Load Libraries:

library(rlang)
library(ggplot2)
library(tinytex)
library(tidyverse)
library(vctrs)
library(reshape2)
library(scales)
library(whitebox)
library(rayrender)
library(spatstat)
library(suncalc)
library(slam)
library(dismo)
library(ggmap)
library(rgdal)
library(rgl)
library(Rglpk)
library(rayshader)
library(terra)
library(sp)
library(raster)
library(sf)
library(shiny)
library(here)
library(lazyraster)
library(png)

# 3- Set Working Directory:

setwd(here::here())
knitr::opts_chunk$set(echo = TRUE)

# set working directory to data folder
setwd("H:/UPM PhD Dissertation/PhD Thesis-2023 UPM-Madid/DATA/Codes/R/3D Rayshader")

# 4- Load Data:

elevation = raster::raster("DEM_RESIZED.tif")
mapview(elevation)

DEMDims <- dim(elevation)
cat("DEMDims (rows, columns):", DEMDims[1], "x", DEMDims[2], "\n")

img <- raster::stack("ICA_NORMALIZED.tif")

print(extent(elevation))
print(extent(img))

# 5- Resample and Normalize Image Data:

imgResampled <- resample(img, elevation, method="bilinear")

IMGDims <- dim(img)
cat("IMGDims (rows, columns):", IMGDims[1], "x", IMGDims[2], "\n")

names(img)

band1 <- img[[1]]  # First band
band2 <- img[[2]]  # Second band
band3 <- img[[3]]  # Third band

band1_normalized <- band1 / 255
band2_normalized <- band2 / 255
band3_normalized <- band3 / 255

# 6- Create RGB Array:

rgb_array <- array(c(band1_normalized[], band2_normalized[], band3_normalized[]), dim = c(nrow(band1), ncol(band1), 3))
rgb_array <- aperm(rgb_array, c(2, 1, 3))

plot_map(rgb_array)

# Resample IMG to match DEM
imgResampled <- resample(band1, elevation, method="bilinear")

rgb_contrast <- scales::rescale(rgb_array, to=c(0, 1))
plot_map(rgb_contrast)

# 7- Check and Match CRS:

raster::crs(band1)
raster::crs(elevation)

elevation_utm = raster::projectRaster(elevation, crs = crs(band1), method = "bilinear")
crs(elevation_utm)

# 8- Convert Elevation Data:

elev = rayshader::raster_to_matrix(elevation_utm)
elev_scaled <- (elev - min(elev)) / (max(elev) - min(elev))

# 9- Plot 3D Model:

plot_3d(rgb_contrast, elev, windowsize = c(1100, 900), zscale = 3, shadowdepth = "auto",
        zoom = 0.5, phi = 45, theta = -45, fov = 70, background = "#FFFFFF", shadowcolor = "#523E2B")

render_clouds(rgb_contrast, zscale = 11, start_altitude = 9500, end_altitude = 9600, 
              sun_altitude = 45, attenuation_coef = 1, offset_y = 300,
              cloud_cover = 0.42, frequency = 0.01, scale_y = 3,
              fractal_levels = 40, clear_clouds = TRUE)

render_camera(theta = 125, phi = 22, zoom = 0.80, fov = 30)

render_scalebar(limits = c(0, 5, 10, 15, 20),  label_unit = "km",
                position = "W", y = 500, scale_length = c(0.33, 1),
                color_first = "#000000", color_second = "grey80")

render_compass(position = "E", compass_radius = 100, color_n = "#FE0036", color_arrow = "#000000", 
               color_background = "#cfe0a9", color_bevel = "#000000")

Sys.sleep(0.2)
render_depth(samples = 500000, filename = "high_quality_render")

